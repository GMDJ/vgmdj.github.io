<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on vgmdj&#39;s blog</title>
    <link>https://blog.vgmdj.cn/tags/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on vgmdj&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>vgmdj</copyright>
    <lastBuildDate>Fri, 23 Nov 2018 11:49:12 +0800</lastBuildDate>
    
	<atom:link href="https://blog.vgmdj.cn/tags/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go语言学习-docker编译</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-docker%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 23 Nov 2018 11:49:12 +0800</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-docker%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;GO本身是支持交叉编译的，且很方便，只需设置几个环境变量即可，但是对于使用了CGO的代码来说，交叉编译就不可行了，替代方案就是使用docker来完成编译。&lt;/p&gt;

&lt;h1 id=&#34;交叉编译&#34;&gt;交叉编译&lt;/h1&gt;

&lt;p&gt;Go本身支持交叉编译，只需设置三个参数即可&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CGO_ENABLED   是否启用CGO&lt;/li&gt;
&lt;li&gt;GOOS          目标运行环境操作系统&lt;/li&gt;
&lt;li&gt;GOARCH        目标运行环境&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-二叉树遍历</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 02 Oct 2018 15:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</guid>
      <description>&lt;h1 id=&#34;二叉树&#34;&gt;二叉树&lt;/h1&gt;

&lt;p&gt;回顾整理二叉树遍历相关内容。
对于二叉树而言，其遍历有两种方式，一种是深度优先，即先优先向下进行遍历，一种是广度优先，逐层向下遍历。&lt;/p&gt;

&lt;h1 id=&#34;源码地址&#34;&gt;源码地址&lt;/h1&gt;

&lt;p&gt;实现语言为 Golang
&lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/algorithm/tree_traversal&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/algorithm/tree_traversal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-module机制</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-module%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 28 Aug 2018 10:23:01 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-module%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;module机制&#34;&gt;Module机制&lt;/h1&gt;

&lt;p&gt;Go Module是Go1.11正式推出的包管理机制，不同于以往基于GOPATH和Vendor的项目构建，其主要是通过$GOPATH/pkg/mod下的缓存包来对项目进行构建。
一如所有的Go新添加功能，Go Module可以通过GO111MODULE来控制是否启用，GO111MODULE有三种类型&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on 所有的构建，都使用Module机制&lt;/li&gt;
&lt;li&gt;off 所有的构建，都不使用Module机制，而是使用GOPATH和Vendor&lt;/li&gt;
&lt;li&gt;auto 在GOPATH下的项目，不使用Module机制，不在GOPATH下的项目使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-观察者模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 24 Jul 2018 13:44:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;观察者模式-observer&#34;&gt;观察者模式(Observer)&lt;/h2&gt;

&lt;p&gt;将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性，我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。
观察者模式所做的工作其实就是在解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使得稳中有降自的变化都不会影响另一边的变化。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Subject(观察目标)
被观察目标知道它的观察者，可以有任意多个观察者观察同一目标。需要提供注册、删除、通知观察者的接口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ConcreSubject(具体目标)
用于存放各ConcreObserver对象&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observer(观察者)
为那些在目标发生改时需获得通知的对象定义一个更新接口。当它的状态发生改变时，向它的各个观察者发出通知&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ConcreObserver(具体观察者)
维护一个指向ConcreSubject对象的引用。存储有关状态，这些状态应与目标的状态保持一致。实现Observer的更新接口以使自身的状态与目标的状态保持一致&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>消息队列学习-RabbitMQ健康检查</title>
      <link>https://blog.vgmdj.cn/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0-RabbitMQ%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Mon, 18 Jun 2018 23:50:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0-RabbitMQ%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid>
      <description>&lt;h1 id=&#34;rest-api-监测&#34;&gt;Rest API 监测&lt;/h1&gt;

&lt;p&gt;需要注意的是RabbitMQ中对外提供的Rest API接口，是Management Plugin所提供的，如果没有安装这个插件的话，则需要使用amqp的方式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vhost 检查
用于检测vhost的运行情况，如果正常，则会收到 “ok”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;路径： /api/aliveness-test/{:vhost}
返回：
    {
      status: &amp;quot;ok&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式学习-分布式事务</title>
      <link>https://blog.vgmdj.cn/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 14 May 2018 14:38:21 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;

&lt;p&gt;分布式系统架构中，分布式事务问题是一个绕不过去的挑战。而微服务架构的流行，让分布式事务问题日益突出！
对于单体应用而言，所有的数据库操作都在一起，可以很简单的使用本地事务，来保证数据的ACID。
但是对于分布式系统，系统由多个独立的服务组成，那么如何解决分布式调用时候数据的一致性就成了一个问题。
具体业务场景如下，比如一个业务操作，如果同时调用服务 A、B、C，需要满足要么同时成功；要么同时失败。A、B、C 可能是多个不同部门开发、部署在不同服务器上的远程服务。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微服务学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Fri, 11 May 2018 14:31:31 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;

&lt;p&gt;使用基于微服务的方式使得应用程序开发变得更快更容易管理，它只需要较少的人力就能实现更多的功能，可以更快更容易地部署。把应用程序设计成一套微服务，更加容易在多台具有负载均衡的服务器上运行，使其能够轻松应对需求高峰、由于时间推移而平稳增长的需求和由于硬件或者软件问题导致的宕机事故。&lt;/p&gt;

&lt;p&gt;微服务，从本质意义上看，还是SOA架构。但内涵有所不同，微服务并不绑定某种特殊的技术，在一个微服务的系统中，可以有Java编写的服务，也可以有Python编写的服务，他们是靠Restful架构风格统一成一个系统的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器学习-k8s搭建</title>
      <link>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 26 Apr 2018 14:28:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h1 id=&#34;kubernetes-学习&#34;&gt;kubernetes 学习&lt;/h1&gt;

&lt;p&gt;目标，搭建好环境，使k8s集群运行起来，在其上部署一个服务，并可以正常访问
当然，单单一个k8s搭建完成还是不够的，还需要一系统的应用来保证服务的高可用，如负载均衡，多master防单点故障等
会在之后进行分析&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-interface</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-interface/</link>
      <pubDate>Fri, 30 Mar 2018 15:41:12 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-interface/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;跳槽季，同事离职后接手他代码，发现了一些自定义error的小问题，在这里做个记录总结。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-map</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-map/</link>
      <pubDate>Fri, 30 Mar 2018 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-map/</guid>
      <description>&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;

&lt;p&gt;go版本 1.10&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-页面的请求过程</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 08 Mar 2018 13:42:29 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;我们在学校上网时一次网页请求的过程是什么呢?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-socket套接字分析</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 08 Mar 2018 13:42:05 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;tcp实验&#34;&gt;TCP实验：&lt;/h2&gt;

&lt;h3 id=&#34;tcp客户端套接字程序&#34;&gt;TCP客户端套接字程序&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.net.*;
class TCPClient{
  public static void main(String argv[]) throws Exception
  {
     String sentence;
     String modifiedSentence;
     BufferedReader inFromUser =
        new BufferedReader(
              new InputStreamReader(System.in));
     Socket ClientSocket = new Socket(&amp;quot;222.194.1.36&amp;quot;,6789);
     DataOutputStream outToServer =
        new DataOutputStream(
              ClientSocket.getOutputStream());
     BufferedReader inFromServer =
        new BufferedReader(new InputStreamReader(
               ClientSocket.getInputStream()));
     sentence =inFromUser.readLine();
     outToServer.writeBytes(sentence + &#39;\n&#39;);
     modifiedSentence = inFromServer.readLine();
     System.out.println(&amp;quot;FROM SERVER:&amp;quot;+
                           modifiedSentence);
     ClientSocket.close();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-协议分析</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 08 Mar 2018 13:40:56 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;协议分层&#34;&gt;协议分层&lt;/h2&gt;

&lt;p&gt;互联网协议分为五层，各层的所有协议被称为协议栈。一般采用自顶向下的方法，首先处理应用层，然后向下进行处理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;应用层
运输层
网络层
链路层
物理层
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-测试通信</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E6%B5%8B%E8%AF%95%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 08 Mar 2018 13:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E6%B5%8B%E8%AF%95%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;之前学习网络的时候做的一些总结，现在正好整理一下，再加深一下记忆&lt;/p&gt;

&lt;h1 id=&#34;测试连接通信主要有命令&#34;&gt;测试连接通信主要有命令&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ping&lt;/li&gt;
&lt;li&gt;arp&lt;/li&gt;
&lt;li&gt;ipconfig&lt;/li&gt;
&lt;li&gt;tracert&lt;/li&gt;
&lt;li&gt;netstat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-sync</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-sync/</link>
      <pubDate>Wed, 02 Aug 2017 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-sync/</guid>
      <description>&lt;h2 id=&#34;sync包介绍&#34;&gt;sync包介绍&lt;/h2&gt;

&lt;p&gt;sync包是go提供的实现锁机制的集合
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-总览</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Tue, 01 Aug 2017 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文主要是记录go语言学习过程中遇到的一些难点，在此用于分享和备忘，如有错误或更好的见解，请留言&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-单例模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 05 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式-singleton&#34;&gt;单例模式(Singleton)&lt;/h2&gt;

&lt;p&gt;保证同一个类全局只有一个实例对象
在第一次实例化后会使用静态变量保存实例，后续全局使用此静态变量
在多线程时应该考虑并发问题，防止两次调用都被判定为实例未初始化而重复初始化对象&lt;/p&gt;

&lt;p&gt;PS： 虽然单例简单，我们还是不能任性的用，因为这样做实例会一直存在内存中，一些我们用的不是那么频繁的东西使用了单例是不是就造成了内存的浪费？大家在用单例的时候还是要多思考思考，这个模块适不适合用单例！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-策略模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 04 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;策略模式-strategy&#34;&gt;策略模式(Strategy)&lt;/h2&gt;

&lt;p&gt;策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-抽象工厂模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 03 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;抽象工厂模式-abstract-factory&#34;&gt;抽象工厂模式(Abstract Factory)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
提供一个创建一系列相关或相互依赖的接口，而无需指定它们具体的类&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-工厂方法模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 02 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;工厂方法模式-factory-method&#34;&gt;工厂方法模式(Factory Method)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
定义了一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。&lt;/p&gt;

&lt;h2 id=&#34;资料推荐&#34;&gt;资料推荐&lt;/h2&gt;

&lt;p&gt;书籍：《大话设计模式》，《设计模式之禅》
golang相关实现例子:  &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/design_pattern&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/design_pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-简单工厂模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 01 Jul 2017 18:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;简单工厂模式-simple-factory&#34;&gt;简单工厂模式(Simple Factory)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
通过封闭、继承、多态把程序的耦合度降低，使程序更加的灵活，容易修改，并易于复用。
简单工厂模式中，各种运算方法类实现了运算接口，在业务上如果想添加一种运算方法，只需要增加一个实现运算接口的类，并且在工厂类中添加一个类型判断。
这种设计适合于业务类型并不是很多的情况，如果业务类型非常多，那么在工作类中就会有一个很长的switch&amp;hellip;case结构，这时候使用方法工厂模式会比较合适。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 01 Jul 2017 14:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文主要是将书中资源整理总结，用于分享和回顾复习，如有错误或更好见解，请留言&lt;/p&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.vgmdj.cn/tags/设计模式/&#34;&gt;https://blog.vgmdj.cn/tags/设计模式/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;资料推荐&#34;&gt;资料推荐&lt;/h2&gt;

&lt;p&gt;书籍：《大话设计模式》，《设计模式之禅》
golang相关实现例子:  &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/design_pattern&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/design_pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-排序</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 18 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h2 id=&#34;总述&#34;&gt;总述&lt;/h2&gt;

&lt;p&gt;算法的排序，一方面作为其他算法的基础，一方面也体现了一些重要的算法的思想，需要我们好好掌握
本章代码的go语言实现都可见于： &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/algorithm/sort&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/algorithm/sort&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;选择排序&lt;/li&gt;
&lt;li&gt;插入排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;li&gt;计数排序&lt;/li&gt;
&lt;li&gt;基数排序&lt;/li&gt;
&lt;li&gt;桶排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 04 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;算法是程序员实力体现的一部分，在日常工作中，不停寻求最优算法，应该是程序员的基本修奍了
下面先做一些总结，留着以后复习使用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>