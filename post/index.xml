<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vgmdj&#39;s blog</title>
    <link>https://blog.vgmdj.cn/post/</link>
    <description>Recent content in Posts on vgmdj&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>vgmdj</copyright>
    <lastBuildDate>Wed, 16 Jan 2019 14:12:23 +0000</lastBuildDate>
    
	<atom:link href="https://blog.vgmdj.cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>influxdb学习-连续查询</title>
      <link>https://blog.vgmdj.cn/post/inflxdb%E5%AD%A6%E4%B9%A0-%E8%BF%9E%E7%BB%AD%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 16 Jan 2019 14:12:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/inflxdb%E5%AD%A6%E4%B9%A0-%E8%BF%9E%E7%BB%AD%E6%9F%A5%E8%AF%A2/</guid>
      <description>CONTINUOUS QUERIES influxdb 连续查询功能常与过期机制结合使用，降低时间精度来，以达到提升查询效率，压缩空间的目的。 查看所有的连续查询 SHOW CONTINUOUS QUERIES 语法 基础语法 CREATE CONTINUOUS QUERY &amp;lt;cq_name&amp;gt; ON &amp;lt;database_name&amp;gt;</description>
    </item>
    
    <item>
      <title>influxdb-使用</title>
      <link>https://blog.vgmdj.cn/post/influxdb%E5%AD%A6%E4%B9%A0-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 14 Dec 2018 17:31:15 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/influxdb%E5%AD%A6%E4%B9%A0-%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;h2 id=&#34;服务端&#34;&gt;服务端&lt;/h2&gt;

&lt;p&gt;推荐使用docker 进行安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull influxdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>influxdb学习-总览</title>
      <link>https://blog.vgmdj.cn/post/influxdb%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 08 Dec 2018 18:05:20 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/influxdb%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;

&lt;p&gt;influxdb是用go编写的一种时序型数据库，调用使用http协议，特别适用于数据随时间进行更新，且几乎不更新或删除的场景，如实时监控、资产追踪等。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux 常用部署指令</title>
      <link>https://blog.vgmdj.cn/post/linux%E5%B8%B8%E7%94%A8%E9%83%A8%E7%BD%B2%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 27 Nov 2018 09:32:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/linux%E5%B8%B8%E7%94%A8%E9%83%A8%E7%BD%B2%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;h1 id=&#34;自动化部署&#34;&gt;自动化部署&lt;/h1&gt;

&lt;p&gt;对于自动化部署的构建，常用的几个指令是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ssh 远程连接并执行一些指令&lt;/li&gt;
&lt;li&gt;scp/rsync 文件传输&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-docker编译</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-docker%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 23 Nov 2018 11:49:12 +0800</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-docker%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;GO本身是支持交叉编译的，且很方便，只需设置几个环境变量即可，但是对于使用了CGO的代码来说，交叉编译就不可行了，替代方案就是使用docker来完成编译。&lt;/p&gt;

&lt;h1 id=&#34;交叉编译&#34;&gt;交叉编译&lt;/h1&gt;

&lt;p&gt;Go本身支持交叉编译，只需设置三个参数即可&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CGO_ENABLED   是否启用CGO&lt;/li&gt;
&lt;li&gt;GOOS          目标运行环境操作系统&lt;/li&gt;
&lt;li&gt;GOARCH        目标运行环境&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-二叉树遍历</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 02 Oct 2018 15:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</guid>
      <description>&lt;h1 id=&#34;二叉树&#34;&gt;二叉树&lt;/h1&gt;

&lt;p&gt;回顾整理二叉树遍历相关内容。
对于二叉树而言，其遍历有两种方式，一种是深度优先，即先优先向下进行遍历，一种是广度优先，逐层向下遍历。&lt;/p&gt;

&lt;h1 id=&#34;源码地址&#34;&gt;源码地址&lt;/h1&gt;

&lt;p&gt;实现语言为 Golang
&lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/algorithm/tree_traversal&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/algorithm/tree_traversal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo博客建立</title>
      <link>https://blog.vgmdj.cn/post/hugo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/</link>
      <pubDate>Wed, 12 Sep 2018 11:10:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/hugo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/</guid>
      <description>简述 随着文章数量的增长，hexo的生成速度也越来越慢，最终还是决定转入golang编写的静态博客框架hugo，从体验上来讲，功能基本都一致，</description>
    </item>
    
    <item>
      <title>go语言学习-module机制</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-module%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 28 Aug 2018 10:23:01 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-module%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;module机制&#34;&gt;Module机制&lt;/h1&gt;

&lt;p&gt;Go Module是Go1.11正式推出的包管理机制，不同于以往基于GOPATH和Vendor的项目构建，其主要是通过$GOPATH/pkg/mod下的缓存包来对项目进行构建。
一如所有的Go新添加功能，Go Module可以通过GO111MODULE来控制是否启用，GO111MODULE有三种类型&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on 所有的构建，都使用Module机制&lt;/li&gt;
&lt;li&gt;off 所有的构建，都不使用Module机制，而是使用GOPATH和Vendor&lt;/li&gt;
&lt;li&gt;auto 在GOPATH下的项目，不使用Module机制，不在GOPATH下的项目使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>加油卡充值api接口</title>
      <link>https://blog.vgmdj.cn/post/%E5%8A%A0%E6%B2%B9%E5%8D%A1%E5%85%85%E5%80%BCapi%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 17 Aug 2018 12:30:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%8A%A0%E6%B2%B9%E5%8D%A1%E5%85%85%E5%80%BCapi%E6%8E%A5%E5%8F%A3/</guid>
      <description>加油卡充值API接口 接口调用前，请先联系客服人员，开通对应充值权限，分配appid和key，以及配置ip白名单。加油卡完成网上充值后，需到所</description>
    </item>
    
    <item>
      <title>设计模式学习-观察者模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 24 Jul 2018 13:44:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;观察者模式-observer&#34;&gt;观察者模式(Observer)&lt;/h2&gt;

&lt;p&gt;将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性，我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。
观察者模式所做的工作其实就是在解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使得稳中有降自的变化都不会影响另一边的变化。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Subject(观察目标)
被观察目标知道它的观察者，可以有任意多个观察者观察同一目标。需要提供注册、删除、通知观察者的接口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ConcreSubject(具体目标)
用于存放各ConcreObserver对象&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observer(观察者)
为那些在目标发生改时需获得通知的对象定义一个更新接口。当它的状态发生改变时，向它的各个观察者发出通知&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ConcreObserver(具体观察者)
维护一个指向ConcreSubject对象的引用。存储有关状态，这些状态应与目标的状态保持一致。实现Observer的更新接口以使自身的状态与目标的状态保持一致&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>efk学习-ElasticSearch</title>
      <link>https://blog.vgmdj.cn/post/efk%E5%AD%A6%E4%B9%A0-ElasticSearch/</link>
      <pubDate>Thu, 12 Jul 2018 10:24:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/efk%E5%AD%A6%E4%B9%A0-ElasticSearch/</guid>
      <description>&lt;h1 id=&#34;基本操作&#34;&gt;基本操作&lt;/h1&gt;

&lt;h2 id=&#34;增删改查&#34;&gt;增删改查&lt;/h2&gt;

&lt;p&gt;增删改查是数据库的基础操作方法。ES 虽然不是数据库，但是很多场合下，都被人们当做一个文档型 NoSQL 数据库在使用，原因自然是因为在接口和分布式架构层面的相似性。虽然在 Elastic Stack 场景下，数据的写入和查询，分别由 Fluntd(Logstash) 和 Kibana 代劳，作为测试、调研和排错时的基本功，还是需要了解一下 ES 的增删改查用法的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>消息队列学习-RabbitMQ健康检查</title>
      <link>https://blog.vgmdj.cn/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0-RabbitMQ%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Mon, 18 Jun 2018 23:50:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0-RabbitMQ%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid>
      <description>&lt;h1 id=&#34;rest-api-监测&#34;&gt;Rest API 监测&lt;/h1&gt;

&lt;p&gt;需要注意的是RabbitMQ中对外提供的Rest API接口，是Management Plugin所提供的，如果没有安装这个插件的话，则需要使用amqp的方式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vhost 检查
用于检测vhost的运行情况，如果正常，则会收到 “ok”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;路径： /api/aliveness-test/{:vhost}
返回：
    {
      status: &amp;quot;ok&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>efk学习-简介</title>
      <link>https://blog.vgmdj.cn/post/efk%E5%AD%A6%E4%B9%A0-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 10 Jun 2018 10:24:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/efk%E5%AD%A6%E4%B9%A0-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;通常日志由服务器生成，输出到不同的文件中，一般会有系统日志、 应用日志、安全日志。这些日志分散地存储在不同的机器上。
而当系统发生故障时，工程师需要登录到各个服务器上，使用 grep / sed / awk 等 Linux 脚本工具去日志里查找故障原因。在没有日志系统的情况下，首先需要定位处理请求的服务器，如果这台服务器部署了多个实例，则需要去每个应用实例的日志目录下去找日志文件。每个应用实例还会设置日志滚动策略（如：每天生成一个文件），还有日志压缩归档策略等。
这样一系列流程下来，对于我们排查故障以及及时找到故障原因，造成了比较大的麻烦。因此，如果我们能把这些日志集中管理，并提供集中检索功能，不仅可以提高诊断的效率，同时对系统情况有个全面的理解，避免事后救火的被动。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式学习-分布式事务</title>
      <link>https://blog.vgmdj.cn/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 14 May 2018 14:38:21 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;

&lt;p&gt;分布式系统架构中，分布式事务问题是一个绕不过去的挑战。而微服务架构的流行，让分布式事务问题日益突出！
对于单体应用而言，所有的数据库操作都在一起，可以很简单的使用本地事务，来保证数据的ACID。
但是对于分布式系统，系统由多个独立的服务组成，那么如何解决分布式调用时候数据的一致性就成了一个问题。
具体业务场景如下，比如一个业务操作，如果同时调用服务 A、B、C，需要满足要么同时成功；要么同时失败。A、B、C 可能是多个不同部门开发、部署在不同服务器上的远程服务。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微服务学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Fri, 11 May 2018 14:31:31 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h1 id=&#34;简述&#34;&gt;简述&lt;/h1&gt;

&lt;p&gt;使用基于微服务的方式使得应用程序开发变得更快更容易管理，它只需要较少的人力就能实现更多的功能，可以更快更容易地部署。把应用程序设计成一套微服务，更加容易在多台具有负载均衡的服务器上运行，使其能够轻松应对需求高峰、由于时间推移而平稳增长的需求和由于硬件或者软件问题导致的宕机事故。&lt;/p&gt;

&lt;p&gt;微服务，从本质意义上看，还是SOA架构。但内涵有所不同，微服务并不绑定某种特殊的技术，在一个微服务的系统中，可以有Java编写的服务，也可以有Python编写的服务，他们是靠Restful架构风格统一成一个系统的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器学习-k8s插件</title>
      <link>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 01 May 2018 14:52:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%8F%92%E4%BB%B6/</guid>
      <description>&lt;h2 id=&#34;应用插件&#34;&gt;应用插件&lt;/h2&gt;

&lt;p&gt;安装完k8s后，仅仅只是第一步，我们还需要一系列的插件来提供对集群的管理，以提高效率&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;traefik ingress，提供负载均衡和统一的对外暴露端口&lt;/li&gt;
&lt;li&gt;heapster插件，提供监控系统&lt;/li&gt;
&lt;li&gt;dashboard插件，用于显示当前资源使用情况&lt;/li&gt;
&lt;li&gt;EFK插件，ElasticSearch+Fluentd+Kibana，用于日志的收集分析和搜索&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器学习-k8s搭建</title>
      <link>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 26 Apr 2018 14:28:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0-k8s%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h1 id=&#34;kubernetes-学习&#34;&gt;kubernetes 学习&lt;/h1&gt;

&lt;p&gt;目标，搭建好环境，使k8s集群运行起来，在其上部署一个服务，并可以正常访问
当然，单单一个k8s搭建完成还是不够的，还需要一系统的应用来保证服务的高可用，如负载均衡，多master防单点故障等
会在之后进行分析&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信开发问题小结</title>
      <link>https://blog.vgmdj.cn/post/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Mon, 23 Apr 2018 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;微信公众号开发告一段落，在这里总结一下期间遇到的各种问题&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql学习-索引</title>
      <link>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Fri, 06 Apr 2018 10:00:49 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;索引&#34;&gt;索引&lt;/h1&gt;

&lt;p&gt;索引是存储引擎找到记录的一种数据结构，而索引优化是对查询性能优化最有效的手段。其类似于一本书的目录部分，如果想在一本书中找到某个特定主题，一般会先看书中的“索引部分”，找到对应的页码。&lt;/p&gt;

&lt;p&gt;在MySQL中，存储引擎用类似的方法使用索引，其先在索引中找到对应值，然后根据匹配的索引记录找到对应的数据行。&lt;/p&gt;

&lt;p&gt;索引可以包含一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为MySQL只能高效地使用索引的最左前缀列。创建一个包含两个列的索引，和创建两个只包含一列的索引是大不相同的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-并发控制</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 01 Apr 2018 09:57:51 +0800</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>程序员进化之路-技术提升</title>
      <link>https://blog.vgmdj.cn/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF-%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/</link>
      <pubDate>Sat, 31 Mar 2018 23:18:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF-%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;不知不觉已经毕业快两年了，但是感觉现在的实力还是很差，仍然需要不停的学习，锻炼。
而要想快速进步，一个明确的大目标和一个个细化的小目标是必不可少的，经历了一段时间的探索，目前来讲，个人职业发展的规划很简单，紧抱google大腿，以go为主开发语言，在后端领域扑腾，专注web开发100年。
那么修炼之路也就很明确了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-interface</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-interface/</link>
      <pubDate>Fri, 30 Mar 2018 15:41:12 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-interface/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;跳槽季，同事离职后接手他代码，发现了一些自定义error的小问题，在这里做个记录总结。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-map</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-map/</link>
      <pubDate>Fri, 30 Mar 2018 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-map/</guid>
      <description>&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;

&lt;p&gt;go版本 1.10&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务器安全防护</title>
      <link>https://blog.vgmdj.cn/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/</link>
      <pubDate>Tue, 27 Mar 2018 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/</guid>
      <description>&lt;h2 id=&#34;服务器安全&#34;&gt;服务器安全&lt;/h2&gt;

&lt;p&gt;一段时间没去打理我的服务器，只是搭个ss，当科学工具用，今天忽然收到服务商的电话，说是服务器上存在不合法行为，还吓我一跳，觉着现在都查这么严格，自建梯子都不行了。实际在管理平台上一看日志，才知道说是服务器存在安全问题，应该是已经被黑掉，在不停的试探别的ip的22端口，总计被监测到400多万次行为，看来当真是有挺长一段时间没管理了。。。&lt;/p&gt;

&lt;h2 id=&#34;主要被攻击方式&#34;&gt;主要被攻击方式&lt;/h2&gt;

&lt;p&gt;从日志中可以看到，应该主要是扫描加暴力破解的方式，所以理所当然的应对手段就是，开启防火墙，改ssh端口，改mysql端口，开启安全组，之前是觉着被攻击的机率太低了，现在看来，再低机率也不应该懈怠&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql学习-事务</title>
      <link>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 22 Mar 2018 15:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;定义&#34;&gt;定义&lt;/h1&gt;

&lt;p&gt;事务(transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。同时，事务也是恢复和并发控制的基本单位。&lt;/p&gt;

&lt;h1 id=&#34;事务特性-acid&#34;&gt;事务特性(acid)&lt;/h1&gt;

&lt;h2 id=&#34;四大特性&#34;&gt;四大特性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性(atomicity)
　原子性是指事务包含的所有操作要么全部操作，要么全部不做，事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一致性(consistency)
一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。
　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;隔离性(isolation)
隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;持久性(durability)
持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql学习-锁</title>
      <link>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E9%94%81/</link>
      <pubDate>Thu, 22 Mar 2018 11:22:49 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E9%94%81/</guid>
      <description>锁 并发任务的顺序实现，最终还是要落到锁上，由锁来控制实现。 根据锁的粒度划分，有行级锁，表级锁，页级锁三种 根据锁的类型划分，可以分为共享锁，互</description>
    </item>
    
    <item>
      <title>mysql学习-总览</title>
      <link>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Wed, 21 Mar 2018 15:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/mysql%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;

&lt;p&gt;数据库(Database,简称DB): 长期存储在计算机内、有组织的、可共享的大量数据的集合
数据库管理系统(Database Management System，简称DBMS)： 位于用户与操作系统之间的一层数据管理软件，是一个大型复杂的软件系统，mysql就是一个开源的RDBMS
因所有的关系型数据库操作及功能都很类似，所以深入研究Mysql，可知识迁移到其他数据库中&lt;/p&gt;

&lt;h2 id=&#34;书籍推荐&#34;&gt;书籍推荐：&lt;/h2&gt;

&lt;p&gt;《高性能mysql》、《深入浅出MYSQL》、《MySQL性能调优与架构设计》&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库学习</title>
      <link>https://blog.vgmdj.cn/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 20 Mar 2018 00:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;h1 id=&#34;定义&#34;&gt;定义&lt;/h1&gt;

&lt;p&gt;数据库(Database,简称DB): 长期存储在计算机内、有组织的、可共享的大量数据的集合
数据库管理系统(Database Management System，简称DBMS)： 位于用户与操作系统之间的一层数据管理软件，是一个大型复杂的软件系统，mysql就是一个开源的RDBMS&lt;/p&gt;

&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/228680-448d468546343fa9?imageMogr2/auto-orient/&#34; alt=&#34;数据库分类&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-页面的请求过程</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 08 Mar 2018 13:42:29 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;我们在学校上网时一次网页请求的过程是什么呢?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-socket套接字分析</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 08 Mar 2018 13:42:05 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;tcp实验&#34;&gt;TCP实验：&lt;/h2&gt;

&lt;h3 id=&#34;tcp客户端套接字程序&#34;&gt;TCP客户端套接字程序&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.net.*;
class TCPClient{
  public static void main(String argv[]) throws Exception
  {
     String sentence;
     String modifiedSentence;
     BufferedReader inFromUser =
        new BufferedReader(
              new InputStreamReader(System.in));
     Socket ClientSocket = new Socket(&amp;quot;222.194.1.36&amp;quot;,6789);
     DataOutputStream outToServer =
        new DataOutputStream(
              ClientSocket.getOutputStream());
     BufferedReader inFromServer =
        new BufferedReader(new InputStreamReader(
               ClientSocket.getInputStream()));
     sentence =inFromUser.readLine();
     outToServer.writeBytes(sentence + &#39;\n&#39;);
     modifiedSentence = inFromServer.readLine();
     System.out.println(&amp;quot;FROM SERVER:&amp;quot;+
                           modifiedSentence);
     ClientSocket.close();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-协议分析</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 08 Mar 2018 13:40:56 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;协议分层&#34;&gt;协议分层&lt;/h2&gt;

&lt;p&gt;互联网协议分为五层，各层的所有协议被称为协议栈。一般采用自顶向下的方法，首先处理应用层，然后向下进行处理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;应用层
运输层
网络层
链路层
物理层
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络学习-测试通信</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E6%B5%8B%E8%AF%95%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 08 Mar 2018 13:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E6%B5%8B%E8%AF%95%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;之前学习网络的时候做的一些总结，现在正好整理一下，再加深一下记忆&lt;/p&gt;

&lt;h1 id=&#34;测试连接通信主要有命令&#34;&gt;测试连接通信主要有命令&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ping&lt;/li&gt;
&lt;li&gt;arp&lt;/li&gt;
&lt;li&gt;ipconfig&lt;/li&gt;
&lt;li&gt;tracert&lt;/li&gt;
&lt;li&gt;netstat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux 常用命令</title>
      <link>https://blog.vgmdj.cn/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 07 Mar 2018 15:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;p&gt;记录一下时不时就会遇到，但总是会忘记的几个命令，用到了再来翻一下就好了&lt;/p&gt;

&lt;h1 id=&#34;bash-篇&#34;&gt;bash 篇&lt;/h1&gt;

&lt;h2 id=&#34;多条件匹配&#34;&gt;多条件匹配&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;-eq  =&lt;/li&gt;
&lt;li&gt;-ne  !=&lt;/li&gt;
&lt;li&gt;-gt  &amp;gt;&lt;/li&gt;
&lt;li&gt;-lt  &amp;lt;&lt;/li&gt;
&lt;li&gt;-ge  &amp;gt;=&lt;/li&gt;
&lt;li&gt;-le  &amp;lt;=&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;以上适用于数字&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-sync</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-sync/</link>
      <pubDate>Wed, 02 Aug 2017 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-sync/</guid>
      <description>&lt;h2 id=&#34;sync包介绍&#34;&gt;sync包介绍&lt;/h2&gt;

&lt;p&gt;sync包是go提供的实现锁机制的集合
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言学习-总览</title>
      <link>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Tue, 01 Aug 2017 13:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文主要是记录go语言学习过程中遇到的一些难点，在此用于分享和备忘，如有错误或更好的见解，请留言&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-单例模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 05 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式-singleton&#34;&gt;单例模式(Singleton)&lt;/h2&gt;

&lt;p&gt;保证同一个类全局只有一个实例对象
在第一次实例化后会使用静态变量保存实例，后续全局使用此静态变量
在多线程时应该考虑并发问题，防止两次调用都被判定为实例未初始化而重复初始化对象&lt;/p&gt;

&lt;p&gt;PS： 虽然单例简单，我们还是不能任性的用，因为这样做实例会一直存在内存中，一些我们用的不是那么频繁的东西使用了单例是不是就造成了内存的浪费？大家在用单例的时候还是要多思考思考，这个模块适不适合用单例！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-策略模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 04 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;策略模式-strategy&#34;&gt;策略模式(Strategy)&lt;/h2&gt;

&lt;p&gt;策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-抽象工厂模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 03 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;抽象工厂模式-abstract-factory&#34;&gt;抽象工厂模式(Abstract Factory)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
提供一个创建一系列相关或相互依赖的接口，而无需指定它们具体的类&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-工厂方法模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 02 Jul 2017 16:25:23 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;工厂方法模式-factory-method&#34;&gt;工厂方法模式(Factory Method)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
定义了一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。&lt;/p&gt;

&lt;h2 id=&#34;资料推荐&#34;&gt;资料推荐&lt;/h2&gt;

&lt;p&gt;书籍：《大话设计模式》，《设计模式之禅》
golang相关实现例子:  &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/design_pattern&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/design_pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-简单工厂模式</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 01 Jul 2017 18:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;简单工厂模式-simple-factory&#34;&gt;简单工厂模式(Simple Factory)&lt;/h2&gt;

&lt;p&gt;工厂模式是对象的生产器，解耦用户对具体对象的依赖。
通过封闭、继承、多态把程序的耦合度降低，使程序更加的灵活，容易修改，并易于复用。
简单工厂模式中，各种运算方法类实现了运算接口，在业务上如果想添加一种运算方法，只需要增加一个实现运算接口的类，并且在工厂类中添加一个类型判断。
这种设计适合于业务类型并不是很多的情况，如果业务类型非常多，那么在工作类中就会有一个很长的switch&amp;hellip;case结构，这时候使用方法工厂模式会比较合适。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 01 Jul 2017 14:39:52 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文主要是将书中资源整理总结，用于分享和回顾复习，如有错误或更好见解，请留言&lt;/p&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.vgmdj.cn/tags/设计模式/&#34;&gt;https://blog.vgmdj.cn/tags/设计模式/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;资料推荐&#34;&gt;资料推荐&lt;/h2&gt;

&lt;p&gt;书籍：《大话设计模式》，《设计模式之禅》
golang相关实现例子:  &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/design_pattern&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/design_pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-排序</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 18 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h2 id=&#34;总述&#34;&gt;总述&lt;/h2&gt;

&lt;p&gt;算法的排序，一方面作为其他算法的基础，一方面也体现了一些重要的算法的思想，需要我们好好掌握
本章代码的go语言实现都可见于： &lt;a href=&#34;https://github.com/vgmdj/go_practice/tree/master/algorithm/sort&#34;&gt;https://github.com/vgmdj/go_practice/tree/master/algorithm/sort&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;选择排序&lt;/li&gt;
&lt;li&gt;插入排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;li&gt;计数排序&lt;/li&gt;
&lt;li&gt;基数排序&lt;/li&gt;
&lt;li&gt;桶排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的职业发展之路</title>
      <link>https://blog.vgmdj.cn/post/%E6%88%91%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Sun, 05 Mar 2017 16:23:51 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E6%88%91%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF/</guid>
      <description>&lt;h2 id=&#34;毕业选择&#34;&gt;毕业选择&lt;/h2&gt;

&lt;p&gt;随着毕业的临近，每天都会一次又一次的问自己，到底想干什么？
- 程序员
  使用大学里学到的技能，为自己赚点饭钱，不停挑战自己的极限，最终成为一个在计算机领域专家
  优点：各方面还算熟悉，总归是一直在计算机专业环境下，无论是想学哪块，相信都不会太难
  缺点：方面不明确，行业前景看不清，没有领路人
- 公务员
  就在老家，房价便宜，生活没有压力，富不起来，但也不可能饿着，身边朋友多，生活自在悠闲
  优点：安逸，没必要为了生存一天到晚的忙碌和委屈求全
  缺点：有上限，从性格、资源等各个方面都不相信自己有官场升职的潜力
- 转行干土木
  依靠家里的资源，不停的学习，最终自己出来单独接项目，成为光荣的包工头
  优点：与当程序员正相反，家里大多是这一行，发展会很顺利，基本不会走弯路
  缺点：各方面都不熟悉，最开始无论是想学哪一块，都会很费劲&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法学习-总览</title>
      <link>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 04 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;算法是程序员实力体现的一部分，在日常工作中，不停寻求最优算法，应该是程序员的基本修奍了
下面先做一些总结，留着以后复习使用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github&#43;hexo blog 搭建过程-配置</title>
      <link>https://blog.vgmdj.cn/post/github-hexo-blog-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 04 Mar 2017 02:34:39 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/github-hexo-blog-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h2 id=&#34;站点配置文件-config-yml修改&#34;&gt;站点配置文件_config.yml修改&lt;/h2&gt;

&lt;p&gt;主体可参考&lt;a href=&#34;http://theme-next.iissnan.com/getting-started.html&#34;&gt;hexo next使用文档&lt;/a&gt;，下面对其进行补充。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github&#43;hexo blog 搭建过程-准备</title>
      <link>https://blog.vgmdj.cn/post/github-blog-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E5%87%86%E5%A4%87/</link>
      <pubDate>Fri, 03 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/github-blog-%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E5%87%86%E5%A4%87/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;一直都有记录的习惯，但内容大多都分散在各个网站，现结合github，使用hexo来搭建一个个人博客，将点滴的记录都聚合在一起，下面是一些关键的搭建过程，一方面作为分享，一方面作为备忘，仅供参考，如有问题请留言通知，谢谢支持！
ps: 准备过程和搜索内容没多少变化，不过多记录&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo 使用指南</title>
      <link>https://blog.vgmdj.cn/post/Hexo-introduction/</link>
      <pubDate>Thu, 02 Mar 2017 16:23:50 +0000</pubDate>
      
      <guid>https://blog.vgmdj.cn/post/Hexo-introduction/</guid>
      <description>&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>